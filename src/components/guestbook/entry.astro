---
import { GUESTBOOK_URL } from "astro:env/server";

const response = await fetch(GUESTBOOK_URL);
const entries = await response.json();

const formatDate = iso => {
  const d = new Date(iso);
  return {
    formattedDate: d.toLocaleDateString("es-ES", { day: "2-digit", month: "2-digit", year: "numeric" }),
    formattedTime: d.toLocaleTimeString("es-ES", { hour: "2-digit", minute: "2-digit" })
  };
};

// Acepta solo http/https, descarta cualquier otra cosa peligrosa
const normalizeUrl = url => {
  try {
    const u = new URL(url.startsWith("http") ? url : `http://${url}`);
    if (u.protocol === "http:" || u.protocol === "https:") return u.href;
  } catch {}
  return null;
};

// Divide el mensaje en partes: texto o link tipo >>id
const parseMessage = msg => {
  const parts = msg.split(/(>>\d+)/g);
  return parts.map(part => {
    const match = /^>>(\d+)$/.exec(part);
    if (match) {
      return { type: "link", id: match[1], text: part };
    }
    return { type: "text", text: part };
  });
};

export const prerender = false;
---

<div>
  {entries.map(({ ID, CreatedAt, Name, Website, Message }) => {
    const { formattedDate, formattedTime } = formatDate(CreatedAt);
    const safeWebsite = Website && normalizeUrl(Website);

    return (
      <div class="entry-box" id={`entry-${ID}`}>
        <div class="entry-header">
          <div class="namekajweb">
            <strong><span class="importantshit">{Name}</span></strong>
            {safeWebsite && (
              <>
                {" desde "}
                <a href={safeWebsite} target="_blank" rel="noopener noreferrer">
                  {Website}
                </a>
              </>
            )}
          </div>
          <div class="datekajid">
            <span class="date">
              escrito el <strong><span class="importantshit">{formattedDate}</span></strong> a las{" "}
              <strong><span class="importantshit">{formattedTime}</span></strong>
            </span>
            <a href={`javascript:quote(${ID})`} class="post-number reply-link">No.{ID}</a>
          </div>
        </div>
        <div class="entry-content">
          {Message.split("\n").map((line, index) => (
            <div class={line.startsWith(">") ? "green" : ""}>
              {parseMessage(line).map((chunk, i) =>
                chunk.type === "link"
                  ? <a href={`/guestbook#entry-${chunk.id}`}>{chunk.text}</a>
                  : chunk.text
              )}
            </div>
          ))}
        </div>
      </div>
    );
  })}
</div>

<script>
  window.quote = id => {
    const field = document.querySelector('#guestbook-form textarea[name="message"]');
    if(field) {
      field.value += `>>${id}\n`;
      field.focus();
    }
  }
</script>

<style>
  .entry-box {
    margin-top: 20px;
    width: fit-content;
    max-width: 100%;
    padding: 10px 15px;
    border: 1px solid #504945;
    background-color: #282828; 
    color: #ebdbb2;
    font-size: 14px;
    line-height: 1.5;
  }

  .importantshit {
    color: #ebdbb2;
  }

  .entry-header {
    margin-bottom: 5px;
    display: flex;
    color: #928374;
    word-break: break-all;
  }

  .entry-content {
    margin-top: 8px;
    word-break: break-word;
    font-size: 13px;
  }

  .namekajweb {
    display: inline-block;
    margin-right: 0.5em;
  }

  @media screen and (max-width: 992px) {
    .entry-box {
      width: auto;
      margin-right: 5px;
    }
    
    .entry-header {
      flex-direction: column;
    }
  }

  @media screen and (max-width: 600px) {
    .datekajid {
      display: flex;
      justify-content: space-between; 
      align-items: center;
    }

    .date {
      flex-grow: 1;
    }

    .post-number {
      margin-left: auto; 
    }
  }
</style>
